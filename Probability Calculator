import random
from copy import deepcopy

class Hat:
    def __init__(self, **kwargs):
        self.contents = []
        for color, count in kwargs.items():
            if count > 0:
                self.contents.extend([color] * count)

    def draw(self, num_balls):
        # If more balls are requested than available, return all
        num_balls = min(num_balls, len(self.contents))
        drawn_balls = random.sample(self.contents, num_balls)
        for ball in drawn_balls:
            self.contents.remove(ball)
        return drawn_balls


def experiment(hat, expected_balls, num_balls_drawn, num_experiments):
    success_count = 0

    for _ in range(num_experiments):
        # Make a deep copy of the hat to preserve original for each trial
        temp_hat = deepcopy(hat)
        drawn_balls = temp_hat.draw(num_balls_drawn)

        # Count occurrences of each color in the drawn balls
        drawn_counts = {}
        for ball in drawn_balls:
            drawn_counts[ball] = drawn_counts.get(ball, 0) + 1

        # Check if all expected balls were drawn at least as many times as required
        success = True
        for color, count in expected_balls.items():
            if drawn_counts.get(color, 0) < count:
                success = False
                break

        if success:
            success_count += 1

    return success_count / num_experiments
